from time import sleep
from impacket.dcerpc.v5 import transport, epm
from impacket.dcerpc.v5.rpcrt import DCERPCException
from impacket.dcerpc.v5.ndr import NDRSTRUCT, NDRCALL
from impacket.uuid import uuidtup_to_bin

UUID = uuidtup_to_bin(("3d267954-eeb7-11d1-b94e-00c04fa3080d", "1.0"))

dce = None
rpctransport = None
ctx_handle = None
handle_lists = []

class CONTEXT_HANDLE(NDRSTRUCT):
    structure = (("Data", "20s=b"),)
    def getAlignment(self):
        return 4

class TLSRpcConnect(NDRCALL):
    opnum = 1

class TLSRpcConnectResponse(NDRCALL):
    structure = (("ctx_handle", CONTEXT_HANDLE),)

class TLSRpcDisconnect(NDRCALL):
    opnum = 2
    structure = (("ctx_handle", CONTEXT_HANDLE),)

def disconnect(handle):
    global dce
    disconn = TLSRpcDisconnect()
    disconn["ctx_handle"] = handle
    disconn_res = dce.request(disconn)
    ret = disconn_res["ctx_handle"]
    return ret

def handles_free():
    global handle_lists
    sleep(7)
    for i in range(0x8):
        handle = handle_lists[0x400 + i * 2]
        disconnect(handle)
        handle_lists.remove(handle)  

def connect_to_license_server(target_ip):
    global dce, rpctransport, ctx_handle
    stringbinding = epm.hept_map(target_ip, UUID, protocol="ncacn_ip_tcp")
    rpctransport = transport.DCERPCTransportFactory(stringbinding)
    rpctransport.set_connect_timeout(3000)
    dce = rpctransport.get_dce_rpc()
    dce.set_auth_level(2)
    dce.connect()
    dce.bind(UUID)
    rpc_conn = TLSRpcConnect()
    dce.request(rpc_conn)

def check(target_ip):
    global dce, rpctransport
    try:
        connect_to_license_server(target_ip)
        print("[+] 目标 {0} 存在漏洞".format(target_ip))
        dce.disconnect()
        rpctransport.disconnect()
    except (ConnectionResetError, DCERPCException) as e:
        if str(e).find('access_denied') >= 0:
            print("[-] 目标 {0} 已更新漏洞补丁".format(target_ip))  
        elif str(e).find('Could not connect') >= 0:
            print("[-] 目标 {0} 端口不可达".format(target_ip))       
        elif str(e).find('not_registered') >= 0:
            print("[-] 目标 {0} 未开启RDL服务".format(target_ip))       
        else:
            print("[-] 未知错误")
        pass

def main():
    with open("ip.txt") as f:
        lines = f.read()
        if lines:
            for line in lines.split('\n'):
                check(line)

if __name__ == '__main__':
    main()

    